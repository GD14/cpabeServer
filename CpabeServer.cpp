// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include "Cpabe.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/protocol/TCompactProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <iostream>
#include "mycpabe.h"
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class CpabeHandler : virtual public CpabeIf {
		public:
				CpabeHandler() {
						// Your initialization goes here
				}

				void getMessage(std::string& _return, const std::string& uid,
								const std::string& update_time, const std::vector<std::string> & attrs) {
						size_t attrs_len = attrs.size()+1;
						char **c_attrs=new char*[attrs_len];				
						int index=0;		
						std::vector<std::string>::const_iterator it=attrs.begin();
						while(it!=attrs.end()){
								size_t tot_len=it->size()+1;
								char*tmp_attr=new char[tot_len];
								snprintf(tmp_attr,tot_len,"%s",it->c_str());
								tmp_attr[tot_len-1]=0;	
								c_attrs[index++]=tmp_attr;
								it++;
						}					
						printf("%d\n",attrs_len);
						c_attrs[attrs_len-1]=0;
						char *ans;
						getMsg(uid.c_str(),update_time.c_str(),c_attrs,&ans);
						std::string tmp(ans);
						_return=ans;
				}

				bool setMessage(const std::string& msg) {
						// Your implementation goes here
						printf("setMessage\n");
				}

};

int main(int argc, char **argv) {
		int port = 9090;
		shared_ptr<CpabeHandler> handler(new CpabeHandler());
		shared_ptr<TProcessor> processor(new CpabeProcessor(handler));
		shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
		shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
		shared_ptr<TProtocolFactory> protocolFactory(new TCompactProtocolFactory());

		init_hiredis();
		TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
		server.serve();
		return 0;
}

